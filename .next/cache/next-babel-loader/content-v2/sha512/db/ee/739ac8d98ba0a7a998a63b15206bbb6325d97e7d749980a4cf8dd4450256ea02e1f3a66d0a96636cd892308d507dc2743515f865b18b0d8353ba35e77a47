{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\luanl\\\\Downloads\\\\XDM Downloads\\\\NLW#5\\\\Projeto\\\\podcastrnext\\\\src\\\\contexts\\\\PlayerContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from 'react';\nexport var PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      episodeList = _useState[0],\n      setEpisodeList = _useState[1];\n\n  var _useState2 = useState(0),\n      currentEpisodeIndex = _useState2[0],\n      setCurrentEpisodeIndex = _useState2[1];\n\n  var _useState3 = useState(false),\n      isPlaying = _useState3[0],\n      setIsPlaying = _useState3[1];\n\n  var _useState4 = useState(false),\n      isLooping = _useState4[0],\n      setIsLooping = _useState4[1];\n\n  var _useState5 = useState(false),\n      isShuffling = _useState5[0],\n      setIsShuffling = _useState5[1];\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShuffle() {\n    setIsShuffling(!isShuffling);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  var hasPrevious = currentEpisodeIndex > 0;\n  var hasNext = isShuffling || currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    if (isShuffling) {\n      var nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length);\n      setCurrentEpisodeIndex(nextRandomEpisodeIndex);\n    } else if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  function clearPlayerState() {\n    setEpisodeList([]);\n    setCurrentEpisodeIndex(0);\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList: episodeList,\n      currentEpisodeIndex: currentEpisodeIndex,\n      play: play,\n      isPlaying: isPlaying,\n      togglePlay: togglePlay,\n      playList: playList,\n      playNext: playNext,\n      playPrevious: playPrevious,\n      setPlayingState: setPlayingState,\n      hasNext: hasNext,\n      hasPrevious: hasPrevious,\n      isLooping: isLooping,\n      toggleShuffle: toggleShuffle,\n      isShuffling: isShuffling,\n      clearPlayerState: clearPlayerState,\n      toggleLoop: toggleLoop\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PlayerContextProvider, \"YSXWY8OfLfVxd5To+FHcHi+GAY0=\");\n\n_c = PlayerContextProvider;\nexport var usePlayer = function usePlayer() {\n  _s2();\n\n  return useContext(PlayerContext);\n};\n\n_s2(usePlayer, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"sources":["C:/Users/luanl/Downloads/XDM Downloads/NLW#5/Projeto/podcastrnext/src/contexts/PlayerContext.tsx"],"names":["createContext","useContext","useState","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","isShuffling","setIsShuffling","play","episode","playList","list","index","togglePlay","toggleLoop","toggleShuffle","setPlayingState","state","hasPrevious","hasNext","length","playNext","nextRandomEpisodeIndex","Math","floor","random","playPrevious","clearPlayerState","usePlayer"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useContext, useState } from 'react';\r\n\r\ntype Episode = {\r\n    title: string;\r\n    members: string;\r\n    thumbnail: string;\r\n    duration: number;\r\n    url: string;\r\n}\r\ntype PlayerContextData = {\r\n    episodeList: Array<Episode>;\r\n    currentEpisodeIndex: number;\r\n    isPlaying: boolean;\r\n    isLooping: boolean;\r\n    isShuffling: boolean;\r\n    play: (episode: Episode) => void;\r\n    playList: (list: Episode[], index: number) => void;\r\n    togglePlay: () => void;\r\n    toggleLoop: () => void;\r\n    toggleShuffle: () => void;\r\n    playNext: () => void;\r\n    playPrevious: () => void;\r\n    clearPlayerState: () => void;\r\n    setPlayingState: (state: boolean) => void;\r\n    hasNext: boolean;\r\n    hasPrevious: boolean;\r\n}\r\nexport const PlayerContext = createContext({} as PlayerContextData);\r\n\r\ntype PlayerContextProviderProps = {\r\n    children: ReactNode;\r\n}\r\n\r\nexport function PlayerContextProvider({ children }: PlayerContextProviderProps) {\r\n\r\n    const [episodeList, setEpisodeList] = useState([]);\r\n    const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0)\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [isLooping, setIsLooping] = useState(false);\r\n    const [isShuffling, setIsShuffling] = useState(false);\r\n\r\n    function play(episode: Episode) {\r\n        setEpisodeList([episode]);\r\n        setCurrentEpisodeIndex(0);\r\n        setIsPlaying(true)\r\n    }\r\n    function playList(list: Episode[], index: number){\r\n        setEpisodeList(list);\r\n        setCurrentEpisodeIndex(index);\r\n        setIsPlaying(true)\r\n    }\r\n    function togglePlay() {\r\n        setIsPlaying(!isPlaying)\r\n    }\r\n    function toggleLoop() {\r\n        setIsLooping(!isLooping)\r\n    }\r\n    function toggleShuffle() {\r\n        setIsShuffling(!isShuffling)\r\n    }\r\n    function setPlayingState(state: boolean) {\r\n        setIsPlaying(state)\r\n    }\r\n\r\n    const hasPrevious = currentEpisodeIndex > 0;\r\n    const hasNext = isShuffling || (currentEpisodeIndex + 1) < episodeList.length;\r\n\r\n    function playNext() {      \r\n        if (isShuffling) {\r\n            const nextRandomEpisodeIndex = Math.floor(Math.random() *  episodeList.length)\r\n            setCurrentEpisodeIndex(nextRandomEpisodeIndex);\r\n        }\r\n        else if (hasNext) {            \r\n            setCurrentEpisodeIndex(currentEpisodeIndex + 1)\r\n        }\r\n\r\n    }\r\n    \r\n    \r\n    function playPrevious() {\r\n        if (hasPrevious) {            \r\n            setCurrentEpisodeIndex(currentEpisodeIndex - 1)\r\n        }\r\n    }\r\n\r\n\r\n    function clearPlayerState() {\r\n        setEpisodeList([]);\r\n        setCurrentEpisodeIndex(0)\r\n    }\r\n\r\n    return (\r\n        <PlayerContext.Provider value={\r\n            {\r\n                episodeList,\r\n                currentEpisodeIndex,\r\n                play,\r\n                isPlaying,\r\n                togglePlay,\r\n                playList,\r\n                playNext,\r\n                playPrevious,\r\n                setPlayingState,\r\n                hasNext,\r\n                hasPrevious,\r\n                isLooping,\r\n                toggleShuffle,\r\n                isShuffling,\r\n                clearPlayerState,\r\n                toggleLoop\r\n            }\r\n        }\r\n        >\r\n            {children}\r\n        </PlayerContext.Provider>\r\n    )\r\n}\r\n\r\nexport const usePlayer = () => {\r\n    return useContext(PlayerContext)\r\n}"]},"metadata":{},"sourceType":"module"}